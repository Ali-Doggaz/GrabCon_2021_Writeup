# Understanding the challenge

This challenge looked a bit tricky at first glance, but don't worry we'll figure it out easily!

So first, we start by looking at the source code.

We see that num_gen() doesn't use any variable; It will only use constants to create a list "s = [203,877,4140,21147,115975,678570,4213597]"

What does that tell us? It tells us that we can remove that function and just store the array it gives us in a list, that I named s.

Same thing for the next loop
  #for i in range(len(s)):
  for i in range(7): 
    ni = ((l*s[i]) % M)           
    n.append(ni)

because s, l, and M are constants, we can just look at the result of n by running the program (and adding a print(n) ) .
Then we store that result in a list and remove that loop.

#result of loop is:
n = [271411, 1172549, 5535180, 4940226, 7280926, 5026654, 2472985]

All of a sudden, our code looks way cleaner!

Now comes the real business:

#binary_rep_flag is in format [ [0,0,1,1,1,0,1], [...], [...], ...  ]. Each char of the flag is transformed to a 7 bits representation.
for binary_char in binary_rep_flag:
    C_curr = []
    for (bit_0_1,y) in zip(binary_char, n):
        C_ = bit_0_1*y
        C_curr.append(C_)
    C += [sum(C_curr)]
    
This is how our flag is encrypted. Let's take a look. We loop over our flag + (at the same time) n (n = [271411, 1172549, 5535180, 4940226, 7280926, 5026654, 2472985])
so for the iTH iteration of our for loop, x will contain binary_char[i] and y will contain n[i]
But binary digits can only be 1 or 0 right?
so when we look at these particular instructions      
        C_ = bit_0_1*y
        C_curr.append(C_)
        
We see that C_ will either contain n[i] (y*1) or 0 (y*0). 
We also see that at the end, we sum all the ints in C_curr and add them to C. 
So the iTH int in C will contain the summed bits of the iTH char of the flag, multiplied each by n[i]


# How do we solve it?

Step 1: (sum_finder.py)

First, we take n 
n = [271411, 1172549, 5535180, 4940226, 7280926, 5026654, 2472985]

We also take all the 7 digits binary numbers that exit: 
0000000, 0000001, .... , 1111111

Then we create a dict 'sums', that will contain all the possible sums that we can do with the numbers in n
To do that, we loop over the binary numbers
Then, for each number, if its iTH digit is 1, we add n[i] to the local_sum we're calculating. 
After going through all 7 digits of a binary number, we add the pair [local_sum, binary_number] to the dict sums.


Alright we can print sums and get all the possible sums and which binary number corresponds to it.
We get:
sums:
{0: [0, 0, 0, 0, 0, 0, 0], 2472985: [0, 0, 0, 0, 0, 0, 1], 5026654: [0, 0, 0, 0, 0, 1, 0], 7499639: [0, 0, 0, 0, 0, 1, 1], 7280926: [0, 0, 0, 0, 1, 0, 0], 9753911: [0, 0, 0, 0, 1, 0, 1], 12307580: [0, 0, 0, 0, 1, 1, 0], 14780565: [0, 0, 0, 0, 1, 1, 1], 4940226: [0, 0, 0, 1, 0, 0, 0], 7413211: [0, 0, 0, 1, 0, 0, 1], 9966880: [0, 0, 0, 1, 0, 1, 0], 12439865: [0, 0, 0, 1, 0, 1, 1], 12221152: [0, 0, 0, 1, 1, 0, 0], 14694137: [0, 0, 0, 1, 1, 0, 1], 17247806: [0, 0, 0, 1, 1, 1, 0], 19720791: [0, 0, 0, 1, 1, 1, 1], 5535180: [0, 0, 1, 0, 0, 0, 0], 8008165: [0, 0, 1, 0, 0, 0, 1], 10561834: [0, 0, 1, 0, 0, 1, 0], 13034819: [0, 0, 1, 0, 0, 1, 1], 12816106: [0, 0, 1, 0, 1, 0, 0], 15289091: [0, 0, 1, 0, 1, 0, 1], 17842760: [0, 0, 1, 0, 1, 1, 0], 20315745: [0, 0, 1, 0, 1, 1, 1], 10475406: [0, 0, 1, 1, 0, 0, 0], 12948391: [0, 0, 1, 1, 0, 0, 1], 15502060: [0, 0, 1, 1, 0, 1, 0], 17975045: [0, 0, 1, 1, 0, 1, 1], 17756332: [0, 0, 1, 1, 1, 0, 0], 20229317: [0, 0, 1, 1, 1, 0, 1], 22782986: [0, 0, 1, 1, 1, 1, 0], 25255971: [0, 0, 1, 1, 1, 1, 1], 1172549: [0, 1, 0, 0, 0, 0, 
0], 3645534: [0, 1, 0, 0, 0, 0, 1], 6199203: [0, 1, 0, 0, 0, 1, 0], 8672188: [0, 1, 0, 0, 0, 1, 1], 8453475: [0, 1, 0, 0, 1, 0, 0], 10926460: [0, 1, 0, 0, 1, 0, 1], 13480129: [0, 1, 0, 0, 1, 1, 0], 15953114: [0, 1, 0, 0, 1, 1, 1], 6112775: [0, 1, 0, 1, 0, 0, 0], 8585760: [0, 1, 0, 1, 0, 0, 1], 11139429: [0, 1, 0, 1, 0, 1, 0], 13612414: [0, 1, 0, 1, 0, 1, 1], 13393701: [0, 1, 0, 1, 1, 0, 0], 15866686: [0, 1, 0, 1, 1, 0, 1], 18420355: [0, 1, 0, 1, 1, 1, 0], 20893340: [0, 1, 0, 1, 1, 1, 1], 6707729: [0, 1, 1, 0, 0, 0, 0], 9180714: 
[0, 1, 1, 0, 0, 0, 1], 11734383: [0, 1, 1, 0, 0, 1, 0], 14207368: [0, 1, 1, 0, 0, 1, 1], 13988655: [0, 1, 1, 0, 1, 0, 0], 16461640: [0, 1, 1, 0, 1, 0, 1], 19015309: [0, 1, 1, 0, 
1, 1, 0], 21488294: [0, 1, 1, 0, 1, 1, 1], 11647955: [0, 1, 1, 1, 0, 0, 0], 14120940: [0, 1, 1, 1, 0, 0, 1], 16674609: [0, 1, 1, 1, 0, 1, 0], 19147594: [0, 1, 1, 1, 0, 1, 1], 18928881: [0, 1, 1, 1, 1, 0, 0], 21401866: [0, 1, 1, 1, 1, 0, 1], 23955535: [0, 1, 1, 1, 1, 1, 0], 26428520: [0, 1, 1, 1, 1, 1, 1], 271411: [1, 0, 0, 0, 0, 0, 0], 2744396: [1, 0, 0, 0, 0, 0, 1], 5298065: [1, 0, 0, 0, 0, 1, 0], 7771050: [1, 0, 0, 0, 0, 1, 1], 7552337: [1, 0, 0, 0, 1, 0, 0], 10025322: [1, 0, 0, 0, 1, 0, 1], 12578991: [1, 0, 0, 0, 1, 1, 0], 15051976: [1, 0, 0, 0, 1, 1, 1], 5211637: [1, 0, 0, 1, 0, 0, 0], 7684622: [1, 0, 0, 1, 0, 0, 1], 10238291: [1, 0, 0, 1, 0, 1, 0], 12711276: [1, 0, 0, 1, 0, 1, 1], 12492563: [1, 0, 
0, 1, 1, 0, 0], 14965548: [1, 0, 0, 1, 1, 0, 1], 17519217: [1, 0, 0, 1, 1, 1, 0], 19992202: [1, 0, 0, 1, 1, 1, 1], 5806591: [1, 0, 1, 0, 0, 0, 0], 8279576: [1, 0, 1, 0, 0, 0, 1], 10833245: [1, 0, 1, 0, 0, 1, 0], 13306230: [1, 0, 1, 0, 0, 1, 1], 13087517: [1, 0, 1, 0, 1, 0, 0], 15560502: [1, 0, 1, 0, 1, 0, 1], 18114171: [1, 0, 1, 0, 1, 1, 0], 20587156: [1, 0, 1, 0, 1, 1, 1], 10746817: [1, 0, 1, 1, 0, 0, 0], 13219802: [1, 0, 1, 1, 0, 0, 1], 15773471: [1, 0, 1, 1, 0, 1, 0], 18246456: [1, 0, 1, 1, 0, 1, 1], 18027743: [1, 0, 1, 1, 1, 0, 0], 20500728: [1, 0, 1, 1, 1, 0, 1], 23054397: [1, 0, 1, 1, 1, 1, 0], 25527382: [1, 0, 1, 1, 1, 1, 1], 1443960: [1, 1, 0, 0, 0, 0, 0], 3916945: [1, 1, 0, 0, 0, 0, 1], 6470614: [1, 1, 0, 0, 0, 1, 0], 8943599: [1, 1, 0, 0, 0, 1, 1], 8724886: [1, 1, 0, 0, 1, 0, 0], 11197871: [1, 1, 0, 0, 1, 0, 1], 13751540: [1, 1, 0, 0, 1, 1, 0], 16224525: [1, 1, 0, 0, 
1, 1, 1], 6384186: [1, 1, 0, 1, 0, 0, 0], 8857171: [1, 1, 0, 1, 0, 0, 1], 11410840: [1, 1, 0, 1, 0, 1, 0], 13883825: [1, 1, 0, 1, 0, 1, 1], 13665112: [1, 1, 0, 1, 1, 0, 0], 16138097: [1, 1, 0, 1, 1, 0, 1], 18691766: [1, 1, 0, 1, 1, 1, 0], 21164751: [1, 1, 0, 1, 1, 1, 1], 6979140: [1, 1, 1, 0, 0, 0, 0], 9452125: [1, 1, 1, 0, 0, 0, 1], 12005794: [1, 1, 1, 
0, 0, 1, 0], 14478779: [1, 1, 1, 0, 0, 1, 1], 14260066: [1, 1, 1, 0, 1, 0, 0], 16733051: [1, 1, 1, 0, 1, 0, 1], 19286720: [1, 1, 1, 0, 1, 1, 0], 21759705: [1, 1, 1, 0, 1, 1, 1], 
11919366: [1, 1, 1, 1, 0, 0, 0], 14392351: [1, 1, 1, 1, 0, 0, 1], 16946020: [1, 1, 1, 1, 0, 1, 0], 19419005: [1, 1, 1, 1, 0, 1, 1], 19200292: [1, 1, 1, 1, 1, 0, 0], 21673277: [1, 1, 1, 1, 1, 0, 1], 24226946: [1, 1, 1, 1, 1, 1, 0], 26699931: [1, 1, 1, 1, 1, 1, 1]}



Now what? Now comes step 2! (ancient_temple_solver.py)

We loop through the list C, and we figure out which binary number corresponds to each int in it.
binary_rep_flag = []
for sum in C:
    if sum not in sums:
        print("sum= " + sum + " non trouvee.")
    else:
        binary_rep_flag.append(sums[sum])
        
  Now we just have to convert the binary numbers we obtained to chars: (binary to decimal then chr() )
  And then we print our flag! Yay!
